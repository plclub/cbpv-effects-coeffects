Require Export resource.CBV.translation.

Theorem translation_correct :
    forall n (γ : gradeVec n) (Γ : contextL n) e T,
    Wt γ Γ e T ->
    CWt γ (translateContext Γ)
        (translateTerm e) (CF Qone (translateType T)).
Proof with (autorewrite with coeffects trans);
    (eauto with coeffects trans renaming typing).
    intros n γ Γ e T H.
    induction H; cbn.
    - (*var*) econstructor...
    - (*abs*) econstructor... econstructor...
        econstructor...
        rewrite contextTranslationHom in IHWt...
    - (*app*) eapply T_Let with (q1 := Qone)
        (γ1 := γ1)
        (A := translateType (Abs q' T1 T2))
        (q2 := Qone)
        (γ2 := q' Q* γ2)  ...
        eapply T_Let with (q1 := Qone)
        (γ1 := Qzero .: γ2) (γ2 := Qone .: 0s)
        (A := translateType T1)...
      + eapply type_pres_renaming...
      + cbn. apply T_App with (γ1 := Qzero .: (Qone .: 0s))
                (γ2 := Qone .: 0s) (q := q')
                (A := translateType T1)...
        * econstructor... econstructor... solve_js1.
        * econstructor... solve_js0.
      + autorewrite with coeffects...
    - (*ret*) econstructor...
    - (*seq*) eapply T_Let with (q2 := Qone)...
        apply T_Seq with (γ1 := Qone .: 0s)
        (γ2 := Qzero .: γ2)...
        + econstructor... solve_js0.
        + eapply type_pres_renaming...
        + autorewrite with coeffects...
    - (*pair*) eapply T_Let with (q2 := Qone)...
        eapply T_Let with (q2 := Qone)...
        + eapply type_pres_renaming...
        + econstructor...
            apply T_VPair with (γ1 := Qzero .: (Qone .: 0s))
                (γ2 := Qone .: (Qzero .: 0s))...
            * econstructor... solve_js1.
            * econstructor... solve_js0.
        + eauto...
        + autorewrite with coeffects...
    - (*split*) subst. eapply T_Let
        with (γ1 := γ1)
        (A := translateType (Pair T1 T2))
        (q1 := Qone) (γ2 := γ2)...
        + eapply T_Split
            with (A1 := translateType T1)
            (A2 := translateType T2)
            (γ1 := Qone .: 0s) (γ2 := Qzero .: γ2).
            * cbn. econstructor... solve_js0.
            * subst.
                eapply type_pres_renaming...
                cbn...
            * eauto...
    - (*inl*) eapply T_Let with (q2 := Qone)
        (γ2 := 0s)...
        + econstructor... econstructor...
            econstructor... solve_js0.
    - (*inr*) eapply T_Let with (q2 := Qone)
        (γ2 := 0s)...
        + econstructor... econstructor...
            econstructor... solve_js0.
    - (*case*) eapply T_Let; subst...
        all: rewrite q_or_1_lt1...
        eapply T_Case with (γ1 := Qone .: 0s)
        (A1 := translateType T1)
        (A2 := translateType T2)
        (γ2 := Qzero .: γ2)...
        + econstructor... solve_js0.
        + eapply type_pres_renaming...
            rewrite contextTranslationHom...
        + eapply type_pres_renaming...
          rewrite contextTranslationHom...
    - (*box*)
      subst q'.
      eapply T_Let with (γ1 := γ1) (γ2 := 0s)...
      econstructor...
      econstructor...
      eapply T_Ret with (γ1 := Qone .: 0s)...
      econstructor...
      solve_js0.
    - (*unbox*) eapply T_Let with (γ2 := γ2)...
        eapply T_Let with
        (γ1 := Qone .: 0s) (γ2 := Qzero .: γ2)
        (q1 := q1) (A := translateType T1)...
        + econstructor... cbn. econstructor... solve_js0.
        + subst... cbn. eapply type_pres_renaming...
            rewrite contextTranslationHom...
    - (* sub *) econstructor...
Qed.
